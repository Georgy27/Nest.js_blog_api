// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  login             String             @unique
  email             String             @unique
  hash              String
  createdAt         String
  passwordRecovery  PasswordRecovery?
  emailConfirmation EmailConfirmation?
  banInfo           BanInfo?
  deviceSessions    DeviceSessions[]
  blogger           Blogger?
  bannedUsers       BannedUsers[]
}

model Blogger {
  user        User          @relation(fields: [bloggerId], references: [id], onDelete: Cascade)
  bloggerId   String        @unique
  blog        Blog[]
  bannedUsers BannedUsers[]
}

model PasswordRecovery {
  id             Int     @id @default(autoincrement())
  recoveryCode   String?
  expirationDate String?
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String  @unique
}

model EmailConfirmation {
  id               Int     @id @default(autoincrement())
  confirmationCode String
  expirationDate   String
  isConfirmed      Boolean
  user             User    @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail        String  @unique
}

model BanInfo {
  id        Int     @id @default(autoincrement())
  isBanned  Boolean @default(false)
  banDate   String?
  banReason String?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @unique
}

model BannedUsers {
  id        String   @id @default(uuid())
  login     String
  isBanned  Boolean
  banDate   String
  banReason String
  createdAt String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
  bloggerId String?
  Blogger   Blogger? @relation(fields: [bloggerId], references: [bloggerId])
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model DeviceSessions {
  id             Int    @id @default(autoincrement())
  ip             String
  deviceName     String
  lastActiveDate String
  deviceId       String @unique
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
}

model Blog {
  id           String        @id @default(uuid())
  name         String
  description  String
  websiteUrl   String
  createdAt    String
  isMembership Boolean
  bannedBlogs  BannedBlogs?
  bannedUsers  BannedUsers[]
  Blogger      Blogger       @relation(fields: [bloggerId], references: [bloggerId], onDelete: Cascade)
  bloggerId    String
  post         Post[]
}

model Post {
  id               String @id @default(uuid())
  title            String
  shortDescription String
  content          String
  blog             Blog   @relation(fields: [blogId], references: [id])
  blogId           String
  createdAt        String
}

model BannedBlogs {
  id       Int     @id @default(autoincrement())
  isBanned Boolean
  banDate  String?
  blog     Blog    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId   String  @unique
}
